{"version":3,"sources":["Utils.tsx","Decrypter.tsx","KeyManager.tsx","Encrypter.tsx","App.tsx","index.tsx"],"names":["download","text","name","blob","Blob","type","link","document","createElement","href","URL","createObjectURL","click","remove","toClipboard","navigator","clipboard","writeText","Decrypter","props","useState","inputText","setInputText","decryptHelperText","setDecryptHelperText","decryptedText","setDecryptedText","decError","setDecError","useEffect","variant","className","component","title","keyPair","multiline","spellCheck","rows","onChange","event","target","value","window","crypto","subtle","decrypt","privateKey","Buffer","from","then","decrypted","result","TextDecoder","decode","Uint8Array","catch","reason","console","log","fullWidth","placeholder","error","helperText","display","justifyContent","disabled","onClick","str2ab","str","buf","ArrayBuffer","length","bufView","i","strLen","charCodeAt","ab2str","a","String","fromCharCode","apply","extractPemContent","pem","header","footer","contentStart","indexOf","contentEnd","substring","importPrivateKey","pemContents","binaryDerString","atob","binaryDer","importKey","hash","importPublicKey","parseKeyPair","keyPairStr","Promise","all","publicKey","resolve","reject","input","accept","multiple","onchange","fileList","files","reader","FileReader","onload","readAsText","pemWrap","contents","label","exportKey","key","format","exported","exportedAsString","exportedAsBase64","btoa","exportPrivateKey","exportPublicKey","createFingerprint","digest","codePoints","Array","map","fromCodePoint","emojiencode","KeyManager","exportedPrivateKey","setExportedPrivateKey","exportedPublicKey","setExportedPublicKey","privateFingerprint","setPrivateFingerprint","publicFingerprint","setPublicFingerprint","saveEnabled","setSaveEnabled","setKeyPair","keyStrings","privKey","localStorage","setItem","keys","priv","pub","onKeyPairChange","localKeyPair","getItem","Card","CardContent","Box","Typography","alignItems","width","color","classList","toggle","CardActions","Button","size","flexDirection","generateKey","modulusLength","publicExponent","undefined","isCryptoKeyPair","loadKeyPair","Encrypter","pubKeyStr","setPubKeyStr","pubKeyHelperText","setPubKeyHelperText","pubError","setPubError","encryptedText","setEncryptedText","TextField","keyStr","encoded","TextEncoder","encode","encrypt","encrypted","App","prefersDarkMode","useMediaQuery","theme","React","useMemo","createMuiTheme","palette","ThemeProvider","CssBaseline","Container","maxWidth","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f7257114.chunk.js","sourcesContent":["/**\n * Save text as a text file.\n */\nexport function download(text: string, name: string) {\n  const blob = new Blob([text], { type: 'text/plain' });\n  var link = document.createElement('a');\n  link.href = URL.createObjectURL(blob);\n  link.download = name;\n  link.click();\n  link.remove();\n}\n\n/**\n * Copy text to clipboard\n */\nexport function toClipboard(text: string) {\n  if (navigator.clipboard) {\n    navigator.clipboard.writeText(text);\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { Box, TextField, Button } from '@material-ui/core';\nimport { Card, CardContent, CardActions } from '@material-ui/core';\nimport { toClipboard } from './Utils';\n\ninterface Props {\n  keyPair: CryptoKeyPair | null;\n}\n\nexport function Decrypter(props: Props) {\n  const [inputText, setInputText] = useState('');\n  const [decryptHelperText, setDecryptHelperText] = useState('');\n  const [decryptedText, setDecryptedText] = useState('');\n  const [decError, setDecError] = useState(false);\n  useEffect(() => {\n    setDecryptHelperText(decError ? 'Invalid input or key' : '');\n  }, [decError]);\n  function handleInputChange(\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) {\n    const text = event?.target.value;\n    setInputText(text);\n    const keyPair = props.keyPair;\n    if (text === '') {\n      setDecryptedText('');\n      setDecError(false);\n      return;\n    }\n    if (keyPair !== null) {\n      window.crypto.subtle\n        .decrypt('RSA-OAEP', keyPair.privateKey, Buffer.from(text, 'base64'))\n        .then((decrypted) => {\n          const result = new TextDecoder('utf-8').decode(\n            new Uint8Array(decrypted),\n          );\n          setDecryptedText(result);\n          setDecError(false);\n        })\n        .catch((reason) => {\n          console.log(reason.name);\n          setDecryptedText('');\n          setDecError(true);\n        });\n    }\n  }\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>\n        <Box className=\"vspacing\">\n          <Typography\n            variant=\"h5\"\n            component=\"h2\"\n            title={\n              props.keyPair !== null\n                ? 'Ready to decrypt'\n                : 'Not ready to decrypt: Key is not set'\n            }\n          >\n            🔓Decrypt\n            {props.keyPair !== null ? ' 🟢' : ' 🟠'}\n          </Typography>\n          <Box>\n            <TextField\n              multiline={true}\n              spellCheck={false}\n              rows={3}\n              onChange={handleInputChange}\n              variant=\"outlined\"\n              fullWidth={true}\n              placeholder=\"Encrypted Text\"\n              error={decError}\n              helperText={decryptHelperText}\n            >\n              {inputText}\n            </TextField>\n          </Box>\n          <Box>\n            <Typography className=\"wrap\">{decryptedText}</Typography>\n          </Box>\n          <Box display=\"flex\" justifyContent=\"flex-end\">\n            <CardActions>\n              <Button\n                title=\"Copy decrypted text\"\n                disabled={decryptedText === ''}\n                onClick={(event) => toClipboard(decryptedText)}\n                variant=\"outlined\"\n              >\n                Copy\n              </Button>\n            </CardActions>\n          </Box>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n","import React, { useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { Box, Button } from '@material-ui/core';\nimport { Card, CardContent, CardActions } from '@material-ui/core';\nimport { download, toClipboard } from './Utils';\n\nconst isCryptoKeyPair = (\n  keyPair: CryptoKey | CryptoKeyPair,\n): keyPair is CryptoKeyPair => {\n  return (keyPair as CryptoKeyPair).privateKey !== undefined;\n};\n\n/**\nConvert a string into an ArrayBuffer\nfrom https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\n*/\nfunction str2ab(str: string) {\n  const buf = new ArrayBuffer(str.length);\n  const bufView = new Uint8Array(buf);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n\n/**\nConvert  an ArrayBuffer into a string\nfrom https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\n*/\nexport function ab2str(buf: ArrayBuffer) {\n  let a = new Uint8Array(buf);\n  return String.fromCharCode.apply(null, a as any);\n}\n\nfunction extractPemContent(pem: string, header: string, footer: string) {\n  const contentStart = pem.indexOf(header);\n  const contentEnd = pem.indexOf(footer);\n  const pemContents = pem.substring(contentStart + header.length, contentEnd);\n  return pemContents;\n}\n\nasync function importPrivateKey(pem: string) {\n  // fetch the part of the PEM string between header and footer\n  const pemHeader = '-----BEGIN PRIVATE KEY-----';\n  const pemFooter = '-----END PRIVATE KEY-----';\n  const pemContents = extractPemContent(pem, pemHeader, pemFooter);\n  // base64 decode the string to get the binary data\n  const binaryDerString = window.atob(pemContents);\n  // convert from a binary string to an ArrayBuffer\n  const binaryDer = str2ab(binaryDerString);\n\n  return window.crypto.subtle.importKey(\n    'pkcs8',\n    binaryDer,\n    {\n      name: 'RSA-OAEP',\n      hash: 'SHA-256',\n    },\n    true,\n    ['decrypt'],\n  );\n}\n\nexport async function importPublicKey(pem: string) {\n  // fetch the part of the PEM string between header and footer\n  const pemHeader = '-----BEGIN PUBLIC KEY-----';\n  const pemFooter = '-----END PUBLIC KEY-----';\n  const pemContents = extractPemContent(pem, pemHeader, pemFooter);\n  // base64 decode the string to get the binary data\n  const binaryDerString = window.atob(pemContents);\n  // convert from a binary string to an ArrayBuffer\n  const binaryDer = str2ab(binaryDerString);\n\n  return window.crypto.subtle.importKey(\n    'spki',\n    binaryDer,\n    {\n      name: 'RSA-OAEP',\n      hash: 'SHA-256',\n    },\n    true,\n    ['encrypt'],\n  );\n}\nasync function parseKeyPair(keyPairStr: string): Promise<CryptoKeyPair> {\n  return Promise.all([\n    importPrivateKey(keyPairStr),\n    importPublicKey(keyPairStr),\n  ]).then((keyPair) => ({ privateKey: keyPair[0], publicKey: keyPair[1] }));\n}\n\n/**\n * Open file dialog -> load text file and parse -> return keyPair\n */\nasync function loadKeyPair(): Promise<CryptoKeyPair> {\n  return new Promise((resolve, reject) => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = 'text/plain';\n    input.multiple = false;\n    function fileHandler(event: Event) {\n      const fileList = input.files;\n      if (fileList !== null && fileList.length > 0) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const keyStr = reader.result as string;\n          parseKeyPair(keyStr)\n            .then((keyPair) => resolve(keyPair))\n            .catch(() => reject());\n        };\n        reader.readAsText(fileList[0]);\n      } else {\n        reject();\n      }\n    }\n    input.onchange = fileHandler;\n    input.click();\n  });\n}\n\n/**\n * Wrap base64 encoded contents with pem header and footer.\n */\nfunction pemWrap(contents: string, label: string) {\n  return `-----BEGIN ${label}-----\\n${contents}\\n-----END ${label}-----`;\n}\n\n/**\n * Export key in pem format\n */\nasync function exportKey(\n  key: CryptoKey,\n  format: 'pkcs8' | 'raw' | 'spki',\n  label: string,\n) {\n  const exported = await window.crypto.subtle.exportKey(format, key);\n  const exportedAsString = ab2str(exported);\n  const exportedAsBase64 = window.btoa(exportedAsString);\n  return pemWrap(exportedAsBase64, label);\n}\n\nasync function exportPrivateKey(key: CryptoKey) {\n  return exportKey(key, 'pkcs8', 'PRIVATE KEY');\n}\n\nasync function exportPublicKey(key: CryptoKey) {\n  return exportKey(key, 'spki', 'PUBLIC KEY');\n}\n\nfunction emojiencode(buf: ArrayBuffer) {\n  const a = Array.from(new Uint8Array(buf));\n  const offset = 0x1f3f7;\n  const codePoints = a.map((value) => value + offset);\n  return String.fromCodePoint.apply(null, codePoints);\n}\n\nfunction createFingerprint(key: string) {\n  return window.crypto.subtle\n    .digest('SHA-256', str2ab(key))\n    .then((digest) => emojiencode(digest));\n}\ninterface Props {\n  onKeyPairChange: (keyPair: CryptoKeyPair) => void;\n}\n\nexport function KeyManager(props: Props) {\n  const [exportedPrivateKey, setExportedPrivateKey] = useState('');\n  const [exportedPublicKey, setExportedPublicKey] = useState('');\n  const [privateFingerprint, setPrivateFingerprint] = useState('No Key');\n  const [publicFingerprint, setPublicFingerprint] = useState('No Key');\n  const [saveEnabled, setSaveEnabled] = useState(false);\n\n  function setKeyPair(keyPair: CryptoKeyPair) {\n    Promise.all([\n      exportPrivateKey(keyPair.privateKey),\n      exportPublicKey(keyPair.publicKey),\n    ]).then((keyStrings) => {\n      const [privKey, publicKey] = keyStrings;\n      localStorage.setItem('keyPair', publicKey + '\\n' + privKey);\n      Promise.all([\n        createFingerprint(privKey),\n        createFingerprint(publicKey),\n      ]).then((keys) => {\n        const [priv, pub] = keys;\n        setExportedPrivateKey(privKey);\n        setExportedPublicKey(publicKey);\n        setPrivateFingerprint(priv);\n        setPublicFingerprint(pub);\n      });\n      setSaveEnabled(true);\n      props.onKeyPairChange(keyPair);\n    });\n  }\n  function generateKey() {\n    window.crypto.subtle\n      .generateKey(\n        {\n          name: 'RSA-OAEP',\n          modulusLength: 2048,\n          publicExponent: new Uint8Array([1, 0, 1]),\n          hash: 'SHA-256',\n        },\n        true,\n        ['encrypt', 'decrypt'],\n      )\n      .then((keyPair) => {\n        if (isCryptoKeyPair(keyPair)) {\n          console.log('New key pair is generated.');\n          setSaveEnabled(true);\n          setKeyPair(keyPair);\n        }\n      });\n  }\n  function importKeyPair() {\n    loadKeyPair()\n      .then((keyPair) => {\n        setKeyPair(keyPair);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  (() => {\n    const localKeyPair = localStorage.getItem('keyPair');\n    if (\n      localKeyPair !== null &&\n      exportedPrivateKey === '' &&\n      exportedPublicKey === ''\n    ) {\n      console.log('Load key pair from localStorage');\n      parseKeyPair(localKeyPair).then((keyPair) => {\n        setKeyPair(keyPair);\n      });\n    }\n  })();\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>\n        <Box className=\"vspacing\">\n          <Typography variant=\"h5\" component=\"h2\">\n            🗝️Your Key Pair\n          </Typography>\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"stretch\"\n          >\n            <Box width=\"30%\">\n              <Card variant=\"outlined\">\n                <CardContent>\n                  <Typography variant=\"body1\" component=\"h3\">\n                    Public\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color={saveEnabled ? 'textPrimary' : 'textSecondary'}\n                    component=\"p\"\n                    className=\"ellipsis\"\n                    onClick={(event: any) =>\n                      event.target.classList.toggle('ellipsis')\n                    }\n                    title={\n                      saveEnabled\n                        ? 'Key finterprint. Click to open/close'\n                        : 'No key is set'\n                    }\n                  >\n                    {publicFingerprint}\n                  </Typography>\n                </CardContent>\n                <Box display=\"flex\" justifyContent=\"flex-end\">\n                  <CardActions>\n                    <Button\n                      title=\"Copy private key\"\n                      disabled={!saveEnabled}\n                      onClick={() => toClipboard(exportedPublicKey)}\n                      size=\"small\"\n                      variant=\"outlined\"\n                    >\n                      Copy\n                    </Button>\n                  </CardActions>\n                </Box>\n              </Card>\n            </Box>\n            <Box width=\"30%\">\n              <Card variant=\"outlined\">\n                <CardContent>\n                  <Typography variant=\"body1\" component=\"h3\">\n                    Private\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color={saveEnabled ? 'textPrimary' : 'textSecondary'}\n                    component=\"p\"\n                    className=\"ellipsis\"\n                    onClick={(event: any) =>\n                      event.target.classList.toggle('ellipsis')\n                    }\n                    title={\n                      saveEnabled\n                        ? 'Key finterprint. Click to open/close'\n                        : 'No key is set'\n                    }\n                  >\n                    {privateFingerprint}\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Box>\n            <Box\n              width=\"30%\"\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"space-around\"\n            >\n              <Button onClick={generateKey} variant=\"outlined\">\n                Generate Key Pair\n              </Button>\n              <Button onClick={importKeyPair} variant=\"outlined\">\n                Load Key Pair\n              </Button>\n              <Button\n                disabled={!saveEnabled}\n                variant=\"outlined\"\n                onClick={() =>\n                  download(\n                    exportedPublicKey + '\\n' + exportedPrivateKey,\n                    'KeyPair.txt',\n                  )\n                }\n              >\n                Save Key Pair\n              </Button>\n            </Box>\n          </Box>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { Box, TextField, Button } from '@material-ui/core';\nimport { Card, CardContent, CardActions } from '@material-ui/core';\nimport { importPublicKey, ab2str } from './KeyManager';\nimport { toClipboard } from './Utils';\n\nexport function Encrypter() {\n  const [pubKeyStr, setPubKeyStr] = useState('');\n  const [pubKeyHelperText, setPubKeyHelperText] = useState('');\n  const [pubError, setPubError] = useState(false);\n  const [inputText, setInputText] = useState('');\n  const [encryptedText, setEncryptedText] = useState('');\n  useEffect(() => {\n    setPubKeyHelperText(pubError ? 'Invalid public key' : '');\n  }, [pubError]);\n  function handlePubKeyChange(\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) {\n    const keyStr = event?.target.value;\n    setPubKeyStr(keyStr);\n    if (keyStr === '') {\n      setPubError(false);\n    } else {\n      importPublicKey(keyStr)\n        .then((key) => {\n          setPubError(false);\n        })\n        .catch((reason) => {\n          setPubError(true);\n        });\n    }\n  }\n  function handleInputChange(\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) {\n    const text = event?.target.value;\n    setInputText(text);\n    if (text === '') {\n      setEncryptedText('');\n      return;\n    }\n    if (pubKeyStr !== '' && !pubError) {\n      importPublicKey(pubKeyStr).then((key) => {\n        const enc = new TextEncoder();\n        const encoded = enc.encode(text);\n        window.crypto.subtle\n          .encrypt(\n            {\n              name: 'RSA-OAEP',\n            },\n            key,\n            encoded,\n          )\n          .then((encrypted) => {\n            const exportedAsString = ab2str(encrypted);\n            const exportedAsBase64 = window.btoa(exportedAsString);\n            setEncryptedText(exportedAsBase64);\n          })\n          .catch((error) => console.log(error));\n      });\n    }\n  }\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>\n        <Box className=\"vspacing\">\n          <Typography variant=\"h5\" component=\"h2\">\n            🔒Encrypt\n          </Typography>\n          <Box>\n            <TextField\n              error={pubError}\n              spellCheck={false}\n              multiline={true}\n              rows={4}\n              onChange={handlePubKeyChange}\n              variant=\"outlined\"\n              fullWidth={true}\n              placeholder=\"Receivers Public Key\"\n              helperText={pubKeyHelperText}\n            >\n              {pubKeyStr}\n            </TextField>\n          </Box>\n          <Box>\n            <TextField\n              multiline={true}\n              spellCheck={false}\n              rows={3}\n              variant=\"outlined\"\n              onChange={handleInputChange}\n              fullWidth={true}\n              placeholder=\"Text to encrypt\"\n            >\n              {inputText}\n            </TextField>\n          </Box>\n          <Box>\n            <Typography className=\"wrap\">{encryptedText}</Typography>\n          </Box>\n          <Box display=\"flex\" justifyContent=\"flex-end\">\n            <CardActions>\n              <Button\n                title=\"Copy encrypted text\"\n                disabled={encryptedText === ''}\n                onClick={(event) => toClipboard(encryptedText)}\n                variant=\"outlined\"\n              >\n                Copy\n              </Button>\n            </CardActions>\n          </Box>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n","import React, { useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { KeyManager } from './KeyManager';\nimport { Encrypter } from './Encrypter';\nimport { Decrypter } from './Decrypter';\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const [keyPair, setKeyPair] = useState(null as CryptoKeyPair | null);\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"App\">\n        <header className=\"App-header\"></header>\n        <Container maxWidth=\"md\" className=\"vspacing\">\n          <Typography component=\"h1\" variant=\"h2\">\n            Webcrypto\n          </Typography>\n          <KeyManager onKeyPairChange={(keyPair) => setKeyPair(keyPair)} />\n          <Encrypter />\n          <Decrypter keyPair={keyPair} />\n        </Container>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}